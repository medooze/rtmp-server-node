/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

declare const _SWIG_enum_tag: unique symbol;

export const QCIF: number;

export const CIF: number;

export const VGA: number;

export const PAL: number;

export const HVGA: number;

export const QVGA: number;

export const HD720P: number;

export const WQVGA: number;

export const W448P: number;

export const SD448P: number;

export const W288P: number;

export const W576: number;

export const FOURCIF: number;

export const FOURSIF: number;

export const XGA: number;

export const WVGA: number;

export const DCIF: number;

export const SIF: number;

export const QSIF: number;

export const SD480P: number;

export const SQCIF: number;

export const SCIF: number;

export const HD1080P: number;

export const UW720P: number;

export const MTU: number;

export const RTPPAYLOADSIZE: number;

export const MAXKBITS: number;

export function GetWidth(size: number): number;

export function GetHeight(size: number): number;

export  class Properties {

  HasProperty(key: string): boolean;

  SetProperty(key: string, intval: number): void;

  SetProperty(key: string, val: number): void;

  SetProperty(key: string, val: number): void;

  SetProperty(key: string, val: string): void;

  SetProperty(key: string, val: string): void;

  GetChildren(path: string, children: Properties): void;

  GetChildren(path: string, children: Properties): void;

  GetChildren(path: string): Properties;

  GetChildren(path: string): Properties;

  GetChildrenArray(path: string, array: any): void;

  GetProperty(key: string): string;

  GetProperty(key: string, defaultValue: string): string;

  GetProperty(key: string, defaultValue: string): string;

  GetProperty(key: string, defaultValue: string): string;

  GetProperty(key: string, defaultValue: string): string;

  GetProperty(key: string, defaultValue: number): number;

  GetProperty(key: string, defaultValue: number): number;

  GetProperty(key: string, defaultValue: number): number;

  GetProperty(key: string, defaultValue: number): number;

  GetProperty(key: string, defaultValue: boolean): boolean;

  GetProperty(key: string, defaultValue: boolean): boolean;

  constructor();
}

export function malloc32(size: any): any;

export  class VideoOrientation {

  facing: boolean;

  flip: boolean;

  rotation: any;

  constructor();
}

export  class ByteBuffer {

  constructor();

  constructor(size: number);

  constructor(data: any, size: number);

  constructor(bytes: ByteBuffer);

  constructor(bytes: ByteBuffer);

  Clone(): ByteBuffer;

  Alloc(size: number): void;

  Set(data: any, size: number): void;

  Append(data: any, size: number): number;

  GetData(): any;

  GetSize(): number;

  GetLength(): number;
}

export  class MediaFrameListener {
}

export  class MediaFrameListenerShared {

  get(): MediaFrameListener;
}

export  class MediaFrameProducer {

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class MediaFrameProducerShared {

  get(): MediaFrameProducer;
}

export type MediaFrameType = number & { readonly [_SWIG_enum_tag]: 'MediaFrameType'; };

export  class TimeService {
}

export  class EventLoop extends TimeService {

  Start(): boolean;

  Stop(): boolean;

  constructor();
}

export  class RTPIncomingMediaStream {

  GetMediaSSRC(): number;

  GetTimeService(): TimeService;

  Mute(muting: boolean): void;
}

export  class RTPIncomingMediaStreamShared {

  get(): RTPIncomingMediaStream;
}

export  class RTPReceiver {

  SendPLI(ssrc: number): number;

  Reset(ssrc: number): number;
}

export  class RTPReceiverShared {

  get(): RTPReceiver;
}

export  class MediaFrameListenerBridge extends RTPIncomingMediaStream {

  constructor(timeService: TimeService | EventLoop, ssrc: number);

  numFrames: number;

  numPackets: number;

  numFramesDelta: number;

  numPacketsDelta: number;

  totalBytes: number;

  bitrate: number;

  minWaitedTime: number;

  maxWaitedTime: number;

  avgWaitedTime: number;
  
  width: number;
  
  height: number;
  
  iframes: number;
  
  iframesDelta: number;

  bframes: number;
  
  bframesDelta: number;
  
  pframes: number;
  
  pframesDelta: number;
  
  codec: string;

  Update(): void;

  Stop(): void;

  AddMediaListener(listener: MediaFrameListenerShared): void;

  RemoveMediaListener(listener: MediaFrameListenerShared): void;
}

export  class MediaFrameListenerBridgeShared {

  constructor(timeService: TimeService | EventLoop, ssrc: number);

  toRTPIncomingMediaStream(): RTPIncomingMediaStreamShared;

  toRTPReceiver(): RTPReceiverShared;

  toMediaFrameListener(): MediaFrameListenerShared;

  toMediaFrameProducer(): MediaFrameProducerShared;

  get(): MediaFrameListenerBridge;
}

export  class RTMPMediaStreamListener {
}

export  class RTMPServerModule {

 static Initialize(): void;

 static Terminate(): void;

 static EnableLog(flag: boolean): void;

 static EnableDebug(flag: boolean): void;

 static EnableUltraDebug(flag: boolean): void;

  constructor();
}

export  class IncomingStreamBridge extends RTMPMediaStreamListener {

  constructor(object: any, maxLateOffset: number, maxBufferingTime: number);

  constructor(object: any, maxLateOffset: number);

  constructor(object: any);

  GetAudio(): MediaFrameListenerBridgeShared;

  GetVideo(): MediaFrameListenerBridgeShared;

  Stop(): void;
}

export  class RTMPNetStream {
}

export  class RTMPNetStreamShared {

  get(): RTMPNetStream;
}

export  class RTMPNetStreamImpl {

  SetListener(object: any): void;

  ResetListener(): void;

  SendStatus(transId: number, code: any, level: any, desc: any): void;

  AddMediaListener(listener: RTMPMediaStreamListener | IncomingStreamBridge): void;

  RemoveMediaListener(listener: RTMPMediaStreamListener | IncomingStreamBridge): void;

  Stop(): void;
  
  GetRTT(): number;
}

export  class RTMPNetStreamImplShared {

  toRTMPNetStream(): RTMPNetStreamShared;

  get(): RTMPNetStreamImpl;
}

export  class RTMPNetConnection {
}

export  class RTMPNetConnectionShared {

  get(): RTMPNetConnection;
}

export  class RTMPNetConnectionImpl extends RTMPNetConnection {

  Accept(object: any): void;

  Reject(): void;

  Disconnect(): void;
}

export  class RTMPNetConnectionImplShared {

  toRTMPNetConnection(): RTMPNetConnectionShared;

  get(): RTMPNetConnectionImpl;
}

export  class RTMPApplicationImpl {

  constructor(object: any);
}

export  class RTMPServerFacade {

  constructor(object: any);

  Start(port: number): void;

  AddApplication(name: any, app: RTMPApplicationImpl): void;

  Stop(): void;
}


